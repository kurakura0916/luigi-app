---

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: luigi-app project


Parameters:
  env:
    Description: environment
    Type: String
  Runtime:
    Description: Language of scripts
    Type: String
    Default: python3.6
  LuigiAppImage:
    Description: ECR URL for luigi-app image
    Type: String
    Default: 123.dkr.ecr.ap-northeast-1.amazonaws.com/luigi-app-image:latest
  SlackApiToken:
    Type: String
    Default: xoxp-123

Resources:
  # ========Roles======== #
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSLambdaFullAccess
      - arn:aws:iam::aws:policy/AWSBatchFullAccess
      Path: "/service-role/"

  # ========Lambda======== #
  ParamCreator:
    Type: AWS::Serverless::Function
    Properties:
      Description: luigi-app param creator to execute luigi
      FunctionName: !Sub "luigi-app-param-creator-${env}"
      CodeUri: ../lambda/build/param_creator.zip
      Handler: param_creator.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: !Ref Runtime
      Timeout: 15
      Environment:
        Variables:
          ENV: !Ref env

  # ========Batch======== #
  LuigiJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: !Sub "luigi-app-job-${env}"
      ContainerProperties:
        Memory: 1000
        Vcpus: 1
        Image: !Ref LuigiAppImage
        Environment: [
          {"Name": "ENV", "Value": {"Ref": "env"}},
          {"Name": "SLACK_API_TOKEN", "Value": {"Ref": "SlackApiToken"}}
        ]
        Command:
          - python
          - -m
          - bin.run_luigi
          - luigi_app.task_main
      RetryStrategy:
        Attempts: 1
